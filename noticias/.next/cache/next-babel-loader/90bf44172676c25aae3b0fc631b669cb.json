{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\n\nconst useValidacion = (stateInicial, validar, fn) => {\n  const {\n    0: valores,\n    1: guardarValores\n  } = useState(stateInicial);\n  const {\n    0: errores,\n    1: guardarErrores\n  } = useState({});\n  const {\n    0: submitForm,\n    1: guardarSubmitForm\n  } = useState(false);\n  useEffect(() => {\n    if (submitForm) {\n      const noErrores = _Object$keys(errores).length === 0;\n\n      if (noErrores) {\n        fn(); // Fn = Función que se ejecuta en el componente\n      }\n\n      guardarSubmitForm(false);\n    }\n  }, [errores]); // Función que se ejecuta conforme el usuario escribe algo\n\n  const handleChange = e => {\n    guardarValores(_objectSpread({}, valores, {\n      [e.target.name]: e.target.value\n    }));\n  }; // Función que se ejecuta cuando el usuario hace submit\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const erroresValidacion = validar(valores);\n    guardarErrores(erroresValidacion);\n    guardarSubmitForm(true);\n  }; // cuando se realiza el evento de blur\n\n\n  const handleBlur = () => {\n    const erroresValidacion = validar(valores);\n    guardarErrores(erroresValidacion);\n  };\n\n  return {\n    valores,\n    errores,\n    handleSubmit,\n    handleChange,\n    handleBlur\n  };\n};\n\nexport default useValidacion;","map":null,"metadata":{},"sourceType":"module"}